/*
 * SPDX-License-Identifier: Apache-2.0
 * SPDX-FileCopyrightText: Huawei Inc.
 */

// This file is auto-generated by @hey-api/openapi-ts

export const $Response = {
    required: ['details', 'resultType', 'success'],
    type: 'object',
    properties: {
        resultType: {
            type: 'string',
            description: 'The result code of response.',
            enum: [
                'Success',
                'Runtime Error',
                'Parameters Invalid',
                'Terraform Script Invalid',
                'Unprocessable Entity',
                'Response Not Valid',
                'Failure while connecting to backend',
                'Credential Capability Not Found',
                'Credentials Not Found',
                'Credential Variables Not Complete',
                'Flavor Invalid',
                'Terraform Execution Failed',
                'Plugin Not Found',
                'Deployer Not Found',
                'No Credential Definition Available',
                'Invalid Service State',
                'Resource Invalid For Monitoring',
                'Unhandled Exception',
                'Service Template Already Registered',
                'Icon Processing Failed',
                'Service Template Not Registered',
                'Service Template Not Approved',
                'Service Template Already Reviewed',
                'Invalid Service Version',
                'Invalid Service Flavors',
                'Service Deployment Not Found',
                'Resource Not Found',
                'Deployment Variable Invalid',
                'Service Template Update Not Allowed',
                'Service Template Still In Use',
                'Unauthorized',
                'Access Denied',
                'Sensitive Field Encryption Or Decryption Failed Exception',
                'Unsupported Enum Value',
                'Terraform Boot Request Failed',
                'Tofu Maker Request Failed',
                'Metrics Data Not Ready',
                'Variable Validation Failed',
                'Variable Schema Definition Invalid',
                'Policy Not Found',
                'Duplicate Policy',
                'Policy Validation Failed',
                'Policy Evaluation Failed',
                'Current Login User No Found',
                'Service Details No Accessible',
                'Migrating activiti Task Not Found',
                'Service Migration Failed Exception',
                'Service Migration Not Found',
                'Service Locked',
                'Eula Not Accepted',
                'Service Flavor Downgrade Not Allowed',
                'Billing Mode Not Supported',
                'Service State Management Task Not Found',
                'Service Modification Audit Not Found',
                'Service Price Calculation Failed',
                'Invalid Git Repo Details',
            ],
        },
        details: {
            type: 'array',
            description: 'Details of the errors occurred',
            items: {
                type: 'string',
                description: 'Details of the errors occurred',
            },
        },
        success: {
            type: 'boolean',
            description: 'Describes if the request is successful',
        },
    },
} as const;

export const $CreateCredential = {
    required: ['csp', 'name', 'timeToLive', 'type', 'variables'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'The name of the credential',
        },
        csp: {
            type: 'string',
            description: 'The cloud service provider of the credential.',
            enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
        },
        description: {
            type: 'string',
            description: 'The description of the credential',
        },
        type: {
            type: 'string',
            description: 'The type of the credential',
            enum: ['variables', 'http_authentication', 'api_key', 'oauth2'],
        },
        variables: {
            type: 'array',
            description: 'The variables list of the credential. The list elements must be unique.',
            items: {
                $ref: '#/components/schemas/CredentialVariable',
            },
        },
        timeToLive: {
            type: 'integer',
            description: 'The time in seconds to live of the credential',
            format: 'int32',
            default: 3600,
        },
    },
} as const;

export const $CredentialVariable = {
    required: ['description', 'isSensitive', 'name', 'value'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description:
                'The name of the CredentialVariable,this field is provided by the plugin of cloud service provider.',
        },
        description: {
            type: 'string',
            description:
                'The description of the CredentialVariable,this field is provided by the plugin of cloud service provider.',
        },
        isMandatory: {
            type: 'boolean',
            description:
                'If the variable is mandatory. If is optional then the credential completeness check will ignore this variable. It is upto the plugin to decide what needs to be done if this optional credential variable is present.',
            default: true,
        },
        isSensitive: {
            type: 'boolean',
            description:
                'Defines if the particular variable contains sensitive data. For example the value is false for username and true for password variables respectively.',
        },
        value: {
            type: 'string',
            description: 'The value of the CredentialVariable, this field is filled by the user.',
        },
    },
    description: 'The variables list of the credential. The list elements must be unique.',
} as const;

export const $ModifyRequest = {
    type: 'object',
    properties: {
        customerServiceName: {
            type: 'string',
            description:
                "Customer's name for the service. Used only for customer's reference. If not provided, the existing customerServiceName from the service will be reused.",
        },
        flavor: {
            type: 'string',
            description: 'The flavor of the Service.',
        },
        serviceRequestProperties: {
            type: 'object',
            additionalProperties: true,
            description: 'The properties for the requested service',
        },
    },
} as const;

export const $ServiceLockConfig = {
    type: 'object',
    properties: {
        destroyLocked: {
            type: 'boolean',
        },
        modifyLocked: {
            type: 'boolean',
        },
    },
} as const;

export const $AutoFill = {
    required: ['deployResourceKind', 'isAllowCreate'],
    type: 'object',
    properties: {
        deployResourceKind: {
            type: 'string',
            description: 'Type of the cloud resource to be reused.',
            enum: [
                'vm',
                'container',
                'publicIP',
                'vpc',
                'volume',
                'unknown',
                'security_group',
                'security_group_rule',
                'keypair',
                'subnet',
            ],
        },
        isAllowCreate: {
            type: 'boolean',
            description:
                ' defines if the required cloud resource can be newly created or should the existing resources must only be used.',
        },
    },
    description: 'Variable autofill',
} as const;

export const $AvailabilityZoneConfig = {
    required: ['displayName', 'mandatory', 'varName'],
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            description: 'The display name of availability zone.',
        },
        varName: {
            type: 'string',
            description: 'The variable name of availability zone.',
        },
        mandatory: {
            type: 'boolean',
            description: 'Indicates if the variable is mandatory.',
        },
        description: {
            type: 'string',
            description: 'The description of availability zone.',
        },
    },
    description: 'The list of availability zone configuration of the service.The list elements must be unique.',
} as const;

export const $Billing = {
    required: ['billingModes'],
    type: 'object',
    properties: {
        billingModes: {
            type: 'array',
            description: 'Supported billing modes by the managed service. The list elements must be unique.',
            items: {
                type: 'string',
                description: 'Supported billing modes by the managed service. The list elements must be unique.',
                enum: ['Fixed', 'Pay per Use'],
            },
        },
        defaultBillingMode: {
            type: 'string',
            description:
                ' This is used only for display purposes. When provided, this billingMode will be selected in the frontends by default.',
            enum: ['Fixed', 'Pay per Use'],
        },
    },
    description: 'The billing policy of the managed service',
} as const;

export const $CloudServiceProvider = {
    required: ['name', 'regions'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'The Cloud Service Provider.',
            enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
        },
        regions: {
            type: 'array',
            description: 'The regions of the Cloud Service Provider. The list elements must be unique.',
            items: {
                $ref: '#/components/schemas/Region',
            },
        },
    },
    description: 'The cloud service provider of the managed service',
} as const;

export const $DeployVariable = {
    required: ['dataType', 'description', 'kind', 'mandatory', 'modificationImpact', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'The name of the deploy variable',
        },
        kind: {
            $ref: '#/components/schemas/DeployVariableKind',
        },
        dataType: {
            type: 'string',
            description: 'The type of the deploy variable',
            enum: ['string', 'number', 'boolean'],
        },
        example: {
            type: 'string',
            description: 'The example value of the deploy variable',
        },
        description: {
            type: 'string',
            description: 'The description of the deploy variable',
        },
        value: {
            type: 'string',
            description: 'The value of the deploy variable. Value can be provided for default variables',
        },
        mandatory: {
            type: 'boolean',
            description: 'Indicates if the variable is mandatory',
        },
        valueSchema: {
            type: 'object',
            additionalProperties: true,
            description:
                'valueSchema of the variable. The key be any keyword that is part of the JSON schema definition which can be found here https://json-schema.org/draft/2020-12/schema',
        },
        sensitiveScope: {
            type: 'string',
            description: 'Sensitive scope of variable storage',
            enum: ['none', 'once', 'always'],
        },
        autoFill: {
            $ref: '#/components/schemas/AutoFill',
        },
        modificationImpact: {
            $ref: '#/components/schemas/ModificationImpact',
        },
    },
    description:
        'The variables for the deployment, which will be passed to the deployer.The list elements must be unique.',
} as const;

export const $DeployVariableKind = {
    type: 'string',
    description: `- \`fix_env\`: Values for variable of this type are defined by the managed service provider 
in the OCL template. Runtime will inject it to deployer as environment variables. 
This variable is not visible to the end user.
- \`fix_variable\`: Values for variable of this type are defined by the managed service 
provider in the OCL template. Runtime will inject it to deployer as usual variables. 
This variable is not visible to the end user.
- \`env\`: Value for a variable of this type can be provided by end user. 
If marked as mandatory then end user must provide value to this variable. 
If marked as optional and if end user does not provide it, 
then the fallback value to this variable is read by runtime (it can read from other sources,
 e.g., OS env variables). This variable is injected as an environment 
 variable to the deployer.
- \`variable\`: Value for a variable of this type can be provided by end user. 
If marked as mandatory then end user must provide value to this variable. 
If marked as optional and if end user does not provide it, 
then the fallback value to this variable is read by runtime (it can read from other sources,
 e.g., OS env variables). This variable is injected as a regular variable to the deployer.
- \`env_env\`: Value to this variable is read by runtime 
(it can read from other sources, e.g., OS env variables) 
and injected as an environment variable to the deployer. 
End user cannot see or change this variable.
- \`env_variable\`: Value to this variable is read by runtime 
(it can read from other sources, e.g., OS env variables) 
and injected as a regular variable to the deployer. 
End user cannot see or change this variable.`,
    enum: ['fix_env', 'fix_variable', 'env', 'variable', 'env_env', 'env_variable'],
} as const;

export const $Deployment = {
    required: ['kind', 'variables'],
    type: 'object',
    properties: {
        kind: {
            type: 'string',
            description: 'The type of the Deployer which will handle the service deployment',
            enum: ['terraform', 'opentofu'],
        },
        variables: {
            type: 'array',
            description:
                'The variables for the deployment, which will be passed to the deployer.The list elements must be unique.',
            items: {
                $ref: '#/components/schemas/DeployVariable',
            },
        },
        credentialType: {
            type: 'string',
            description: 'The credential type to do the deployment',
            enum: ['variables', 'http_authentication', 'api_key', 'oauth2'],
        },
        serviceAvailabilityConfigs: {
            maxItems: 2147483647,
            minItems: 1,
            type: 'array',
            description: 'The list of availability zone configuration of the service.The list elements must be unique.',
            items: {
                $ref: '#/components/schemas/AvailabilityZoneConfig',
            },
        },
        deployer: {
            type: 'string',
            description:
                'The real deployer, something like terraform scripts. Either deployer or deployFromGitRepo must be provided.',
        },
        scriptsRepo: {
            $ref: '#/components/schemas/ScriptsRepo',
        },
    },
    description: 'The deployment of the managed service',
} as const;

export const $FlavorsWithPrice = {
    required: ['isDowngradeAllowed', 'modificationImpact', 'serviceFlavors'],
    type: 'object',
    properties: {
        serviceFlavors: {
            type: 'array',
            description: 'The flavors of the managed service. The list elements must be unique.',
            items: {
                $ref: '#/components/schemas/ServiceFlavorWithPrice',
            },
        },
        modificationImpact: {
            $ref: '#/components/schemas/ModificationImpact',
        },
        isDowngradeAllowed: {
            type: 'boolean',
            description: 'Whether the downgrading is allowed, default value: true.',
        },
        downgradeAllowed: {
            type: 'boolean',
        },
    },
    description: 'The flavors of the managed service',
} as const;

export const $ModificationImpact = {
    type: 'object',
    properties: {
        isDataLost: {
            type: 'boolean',
            description: 'Is data lost when service configuration is modified.',
        },
        isServiceInterrupted: {
            type: 'boolean',
            description: 'Is service availability interrupted when the configuration is interrupted.',
        },
    },
    description: 'Impact on service when flavor is changed.',
} as const;

export const $Ocl = {
    required: [
        'billing',
        'category',
        'cloudServiceProvider',
        'deployment',
        'description',
        'flavors',
        'icon',
        'name',
        'namespace',
        'serviceHostingType',
        'serviceProviderContactDetails',
        'serviceVersion',
        'version',
    ],
    type: 'object',
    properties: {
        category: {
            type: 'string',
            description: 'The catalog of the service',
            enum: [
                'ai',
                'compute',
                'container',
                'storage',
                'network',
                'database',
                'mediaService',
                'security',
                'middleware',
                'others',
            ],
        },
        version: {
            type: 'string',
            description: 'The version of the Ocl',
        },
        name: {
            type: 'string',
            description: 'The name of the managed service',
        },
        serviceVersion: {
            type: 'string',
            description: 'The version of the managed service',
        },
        description: {
            type: 'string',
            description: 'The description of the managed service',
        },
        namespace: {
            type: 'string',
            description: 'The namespace of the managed service',
        },
        icon: {
            type: 'string',
            description: 'The icon of the managed service',
        },
        cloudServiceProvider: {
            $ref: '#/components/schemas/CloudServiceProvider',
        },
        deployment: {
            $ref: '#/components/schemas/Deployment',
        },
        flavors: {
            $ref: '#/components/schemas/FlavorsWithPrice',
        },
        billing: {
            $ref: '#/components/schemas/Billing',
        },
        serviceHostingType: {
            type: 'string',
            description: 'Defines which cloud service account is used for deploying cloud resources.',
            enum: ['self', 'service-vendor'],
        },
        serviceProviderContactDetails: {
            $ref: '#/components/schemas/ServiceProviderContactDetails',
        },
        eula: {
            type: 'string',
            description: 'End user license agreement content of the service.',
        },
    },
} as const;

export const $Price = {
    required: ['cost', 'currency'],
    type: 'object',
    properties: {
        cost: {
            type: 'number',
            description: 'The value of the cost.',
        },
        currency: {
            type: 'string',
            description: 'The currency of the cost.',
            enum: ['USD', 'EUR', 'CNY'],
        },
        period: {
            type: 'string',
            description: 'The period of the cost.',
            enum: ['yearly', 'monthly', 'daily', 'hourly', 'oneTime'],
        },
    },
    description: 'The listed price of the flavor of the manged service.',
} as const;

export const $RatingMode = {
    required: ['isPriceOnlyForManagementLayer'],
    type: 'object',
    properties: {
        fixedPrice: {
            $ref: '#/components/schemas/Price',
        },
        resourceUsage: {
            $ref: '#/components/schemas/ResourceUsage',
        },
        isPriceOnlyForManagementLayer: {
            type: 'boolean',
            description:
                'Whether the price is only for management layer. Consumption of the workload resources will be billed additionally..',
        },
    },
    description: 'The pricing of the flavor',
} as const;

export const $Region = {
    required: ['area', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'The name of the Region',
        },
        area: {
            type: 'string',
            description: 'The area which the region belongs to, such as Asia, Europe, Africa',
        },
    },
    description: 'The regions of the Cloud Service Provider. The list elements must be unique.',
} as const;

export const $Resource = {
    required: ['count', 'deployResourceKind'],
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            description: 'The count of the same resource.',
            format: 'int32',
        },
        deployResourceKind: {
            type: 'string',
            description: 'The kind of the same resource.',
            enum: [
                'vm',
                'container',
                'publicIP',
                'vpc',
                'volume',
                'unknown',
                'security_group',
                'security_group_rule',
                'keypair',
                'subnet',
            ],
        },
        properties: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                description: 'The properties of the same resource.',
            },
            description: 'The properties of the same resource.',
        },
    },
    description: 'The resources of the flavor of the manged service.',
} as const;

export const $ResourceUsage = {
    required: ['resources'],
    type: 'object',
    properties: {
        resources: {
            type: 'array',
            description: 'The resources of the flavor of the manged service.',
            items: {
                $ref: '#/components/schemas/Resource',
            },
        },
        licensePrice: {
            $ref: '#/components/schemas/Price',
        },
        markUpPrice: {
            $ref: '#/components/schemas/Price',
        },
    },
    description: 'The resource usage of the flavor in the managed service.',
} as const;

export const $ScriptsRepo = {
    required: ['branch', 'repoUrl'],
    type: 'object',
    properties: {
        repoUrl: {
            type: 'string',
            description: 'URL of the repo',
        },
        branch: {
            type: 'string',
            description: 'Branch to be checked out. Can be branch or a Tag',
        },
        scriptsPath: {
            type: 'string',
            description:
                'Directory in the repo where scripts are present. If not provided, the root directory of the repo is considered',
        },
    },
    description: 'Deployment scripts hosted on a GIT repo. Either deployer or deployFromGitRepo must be provided.',
} as const;

export const $ServiceFlavorWithPrice = {
    required: ['name', 'pricing', 'priority', 'properties'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'The flavor name',
        },
        properties: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                description: 'The properties of the flavor',
            },
            description: 'The properties of the flavor',
        },
        priority: {
            minimum: 1,
            type: 'integer',
            description: 'The priority of the flavor. The larger value means lower priority.',
            format: 'int32',
        },
        features: {
            type: 'array',
            description: 'Important features and differentiators of the flavor.',
            items: {
                type: 'string',
                description: 'Important features and differentiators of the flavor.',
            },
        },
        pricing: {
            $ref: '#/components/schemas/RatingMode',
        },
    },
    description: 'The flavors of the managed service. The list elements must be unique.',
} as const;

export const $ServiceProviderContactDetails = {
    type: 'object',
    properties: {
        emails: {
            maxItems: 2147483647,
            minItems: 1,
            type: 'array',
            description: 'List of the email details of the service provider. The list elements must be unique.',
            items: {
                type: 'string',
                description: 'List of the email details of the service provider. The list elements must be unique.',
            },
        },
        phones: {
            maxItems: 2147483647,
            minItems: 1,
            type: 'array',
            description: 'List of the phone details of the service provider. The list elements must be unique.',
            items: {
                type: 'string',
                description: 'List of the phone details of the service provider. The list elements must be unique.',
            },
        },
        chats: {
            maxItems: 2147483647,
            minItems: 1,
            type: 'array',
            description: 'List of the chat details of the service provider. The list elements must be unique.',
            items: {
                type: 'string',
                description: 'List of the chat details of the service provider. The list elements must be unique.',
            },
        },
        websites: {
            maxItems: 2147483647,
            minItems: 1,
            type: 'array',
            description: 'List of the website details of the service provider. The list elements must be unique.',
            items: {
                type: 'string',
                description: 'List of the website details of the service provider. The list elements must be unique.',
            },
        },
    },
    description: 'The contact details of the service provider.',
} as const;

export const $Link = {
    type: 'object',
    properties: {
        rel: {
            type: 'string',
        },
        href: {
            type: 'string',
        },
        hreflang: {
            type: 'string',
        },
        media: {
            type: 'string',
        },
        title: {
            type: 'string',
        },
        type: {
            type: 'string',
        },
        deprecation: {
            type: 'string',
        },
        profile: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
    },
} as const;

export const $ServiceTemplateDetailVo = {
    required: [
        'billing',
        'category',
        'createTime',
        'csp',
        'deployment',
        'description',
        'flavors',
        'icon',
        'lastModifiedTime',
        'name',
        'namespace',
        'regions',
        'serviceHostingType',
        'serviceProviderContactDetails',
        'serviceRegistrationState',
        'serviceTemplateId',
        'variables',
        'version',
    ],
    type: 'object',
    properties: {
        serviceTemplateId: {
            type: 'string',
            description: 'ID of the registered service.',
            format: 'uuid',
        },
        name: {
            type: 'string',
            description: 'Name of the registered service.',
        },
        version: {
            type: 'string',
            description: 'Version of the registered service.',
        },
        csp: {
            type: 'string',
            description: 'Csp of the registered service.',
            enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
        },
        category: {
            type: 'string',
            description: 'Category of the registered service.',
            enum: [
                'ai',
                'compute',
                'container',
                'storage',
                'network',
                'database',
                'mediaService',
                'security',
                'middleware',
                'others',
            ],
        },
        namespace: {
            type: 'string',
            description: 'Namespace of the user who registered service template.',
        },
        regions: {
            type: 'array',
            description: 'The regions of the Cloud Service Provider.',
            items: {
                $ref: '#/components/schemas/Region',
            },
        },
        description: {
            type: 'string',
            description: 'The description of the registered service.',
        },
        icon: {
            type: 'string',
            description: 'The icon of the registered service.',
        },
        deployment: {
            $ref: '#/components/schemas/Deployment',
        },
        variables: {
            type: 'array',
            description: 'The variables for the deployment, which will be passed to the deployer.',
            items: {
                $ref: '#/components/schemas/DeployVariable',
            },
        },
        flavors: {
            $ref: '#/components/schemas/FlavorsWithPrice',
        },
        billing: {
            $ref: '#/components/schemas/Billing',
        },
        serviceHostingType: {
            type: 'string',
            description: 'Defines which cloud service account is used for deploying cloud resources.',
            enum: ['self', 'service-vendor'],
        },
        createTime: {
            type: 'string',
            description: 'createTime of the registered service.',
            format: 'date-time',
        },
        lastModifiedTime: {
            type: 'string',
            description: 'Last updateTime of the registered service.',
            format: 'date-time',
        },
        serviceRegistrationState: {
            type: 'string',
            description: 'State of registered service template.',
            enum: ['unregistered', 'approval pending', 'approved', 'rejected'],
        },
        reviewComment: {
            type: 'string',
            description: 'Comment of reviewed service template.',
        },
        serviceProviderContactDetails: {
            $ref: '#/components/schemas/ServiceProviderContactDetails',
        },
        eula: {
            type: 'string',
            description: 'End user license agreement content of the service.',
        },
        links: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/Link',
            },
        },
    },
} as const;

export const $ReviewRegistrationRequest = {
    required: ['reviewResult'],
    type: 'object',
    properties: {
        reviewResult: {
            type: 'string',
            description: 'The result of review registration.',
            enum: ['approved', 'rejected'],
        },
        reviewComment: {
            type: 'string',
            description: 'The comment of review registration.',
        },
    },
} as const;

export const $ServicePolicyUpdateRequest = {
    type: 'object',
    properties: {
        flavorNameList: {
            maxItems: 2147483647,
            minItems: 1,
            type: 'array',
            description:
                'The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors.',
            items: {
                type: 'string',
                description:
                    'The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors.',
            },
        },
        policy: {
            type: 'string',
            description: 'The policy.',
        },
        enabled: {
            type: 'boolean',
            description: 'Is the policy enabled. true:enabled;false:disabled.',
        },
    },
} as const;

export const $ServicePolicy = {
    required: ['createTime', 'enabled', 'lastModifiedTime', 'policy', 'servicePolicyId', 'serviceTemplateId'],
    type: 'object',
    properties: {
        servicePolicyId: {
            type: 'string',
            description: 'The id of the policy.',
            format: 'uuid',
        },
        policy: {
            type: 'string',
            description: 'The valid policy belongs to the service.',
        },
        serviceTemplateId: {
            type: 'string',
            description: 'The id of registered service template which the policy belongs to.',
            format: 'uuid',
        },
        flavorNameList: {
            type: 'array',
            description:
                'The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors.',
            items: {
                type: 'string',
                description:
                    'The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors.',
            },
        },
        enabled: {
            type: 'boolean',
            description: 'Is the policy enabled.',
        },
        createTime: {
            type: 'string',
            description: 'Time of the policy created.',
            format: 'date-time',
        },
        lastModifiedTime: {
            type: 'string',
            description: 'Time of the policy updated.',
            format: 'date-time',
        },
    },
} as const;

export const $UserPolicyUpdateRequest = {
    type: 'object',
    properties: {
        csp: {
            type: 'string',
            description: 'The csp which the policy belongs to.',
            enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
        },
        policy: {
            type: 'string',
            description: 'The policy.',
        },
        enabled: {
            type: 'boolean',
            description: 'Is the policy enabled. true:enabled;false:disabled.',
        },
    },
} as const;

export const $UserPolicy = {
    required: ['createTime', 'csp', 'enabled', 'lastModifiedTime', 'policy', 'userPolicyId'],
    type: 'object',
    properties: {
        userPolicyId: {
            type: 'string',
            description: 'The id of the policy.',
            format: 'uuid',
        },
        policy: {
            type: 'string',
            description: 'The valid policy created by the user.',
        },
        csp: {
            type: 'string',
            description: 'The csp which the policy belongs to.',
            enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
        },
        enabled: {
            type: 'boolean',
            description: 'Is the policy enabled.',
        },
        createTime: {
            type: 'string',
            description: 'Time of the policy created.',
            format: 'date-time',
        },
        lastModifiedTime: {
            type: 'string',
            description: 'Time of the policy updated.',
            format: 'date-time',
        },
    },
} as const;

export const $DeployRequest = {
    required: ['billingMode', 'category', 'csp', 'flavor', 'region', 'serviceHostingType', 'serviceName', 'version'],
    type: 'object',
    properties: {
        category: {
            type: 'string',
            description: 'The category of the service',
            enum: [
                'ai',
                'compute',
                'container',
                'storage',
                'network',
                'database',
                'mediaService',
                'security',
                'middleware',
                'others',
            ],
        },
        serviceName: {
            type: 'string',
            description: 'The name of the service ordered.',
        },
        customerServiceName: {
            type: 'string',
            description:
                "Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated",
        },
        version: {
            type: 'string',
            description: 'The version of service',
        },
        region: {
            $ref: '#/components/schemas/Region',
        },
        csp: {
            type: 'string',
            description: 'The csp of the Service.',
            enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
        },
        flavor: {
            type: 'string',
            description: 'The flavor of the Service.',
        },
        serviceHostingType: {
            type: 'string',
            description: 'Defines which cloud service account is used for deploying cloud resources.',
            enum: ['self', 'service-vendor'],
        },
        serviceRequestProperties: {
            type: 'object',
            additionalProperties: true,
            description: 'The properties for the requested service',
        },
        availabilityZones: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                description: 'The availability zones to deploy the service instance.',
            },
            description: 'The availability zones to deploy the service instance.',
        },
        billingMode: {
            type: 'string',
            description: 'The billing mode of the managed service.',
            enum: ['Fixed', 'Pay per Use'],
        },
        eulaAccepted: {
            type: 'boolean',
        },
    },
} as const;

export const $MigrateRequest = {
    required: [
        'billingMode',
        'category',
        'csp',
        'flavor',
        'originalServiceId',
        'region',
        'serviceHostingType',
        'serviceName',
        'version',
    ],
    type: 'object',
    properties: {
        category: {
            type: 'string',
            description: 'The category of the service',
            enum: [
                'ai',
                'compute',
                'container',
                'storage',
                'network',
                'database',
                'mediaService',
                'security',
                'middleware',
                'others',
            ],
        },
        serviceName: {
            type: 'string',
            description: 'The name of the service ordered.',
        },
        customerServiceName: {
            type: 'string',
            description:
                "Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated",
        },
        version: {
            type: 'string',
            description: 'The version of service',
        },
        region: {
            $ref: '#/components/schemas/Region',
        },
        csp: {
            type: 'string',
            description: 'The csp of the Service.',
            enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
        },
        flavor: {
            type: 'string',
            description: 'The flavor of the Service.',
        },
        serviceHostingType: {
            type: 'string',
            description: 'Defines which cloud service account is used for deploying cloud resources.',
            enum: ['self', 'service-vendor'],
        },
        serviceRequestProperties: {
            type: 'object',
            additionalProperties: true,
            description: 'The properties for the requested service',
        },
        availabilityZones: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                description: 'The availability zones to deploy the service instance.',
            },
            description: 'The availability zones to deploy the service instance.',
        },
        billingMode: {
            type: 'string',
            description: 'The billing mode of the managed service.',
            enum: ['Fixed', 'Pay per Use'],
        },
        originalServiceId: {
            type: 'string',
            description: 'The id of the service to migrate',
            format: 'uuid',
        },
        eulaAccepted: {
            type: 'boolean',
        },
    },
} as const;

export const $ServicePolicyCreateRequest = {
    required: ['enabled', 'policy', 'serviceTemplateId'],
    type: 'object',
    properties: {
        serviceTemplateId: {
            type: 'string',
            description: 'The id of registered service template which the policy belongs to.',
            format: 'uuid',
        },
        flavorNameList: {
            maxItems: 2147483647,
            minItems: 1,
            type: 'array',
            description:
                'The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors.',
            items: {
                type: 'string',
                description:
                    'The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors.',
            },
        },
        policy: {
            type: 'string',
            description: 'The policy.',
        },
        enabled: {
            type: 'boolean',
            description: 'Is the policy enabled. true:enabled;false:disabled.',
        },
    },
} as const;

export const $UserPolicyCreateRequest = {
    required: ['csp', 'enabled', 'policy'],
    type: 'object',
    properties: {
        csp: {
            type: 'string',
            description: 'The csp which the policy belongs to.',
            enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
        },
        policy: {
            type: 'string',
            description: 'The policy.',
        },
        enabled: {
            type: 'boolean',
            description: 'Is the policy enabled. true:enabled;false:disabled.',
        },
    },
} as const;

export const $WorkFlowTask = {
    required: [
        'businessKey',
        'createTime',
        'executionId',
        'processDefinitionId',
        'processDefinitionName',
        'processInstanceId',
        'status',
        'taskId',
        'taskName',
    ],
    type: 'object',
    properties: {
        processInstanceId: {
            type: 'string',
            description: 'The id of the ProcessInstance',
        },
        processInstanceName: {
            type: 'string',
            description: 'The name of the ProcessInstance',
        },
        processDefinitionId: {
            type: 'string',
            description: 'The id of the ProcessDefinition',
        },
        processDefinitionName: {
            type: 'string',
            description: 'The name of the ProcessDefinition',
        },
        executionId: {
            type: 'string',
            description: 'The execution id of the ProcessInstance',
        },
        taskId: {
            type: 'string',
            description: 'The id of the task',
        },
        taskName: {
            type: 'string',
            description: 'The name of the task',
        },
        businessKey: {
            type: 'string',
            description: 'The businessKey of the Process',
        },
        status: {
            type: 'string',
            description: 'The status of the Task',
            enum: ['done', 'failed'],
        },
        createTime: {
            type: 'string',
            description: 'The create time of the task',
            format: 'date-time',
        },
    },
} as const;

export const $AbstractCredentialInfo = {
    required: ['csp', 'description', 'name', 'type'],
    type: 'object',
    allOf: [
        {
            $ref: '#/components/schemas/CredentialVariables',
        },
        {
            type: 'object',
            properties: {
                csp: {
                    type: 'string',
                    description: 'The cloud service provider of the credential.',
                    enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
                },
                type: {
                    type: 'string',
                    description:
                        'The type of the credential, this field is provided by the plugin of cloud service provider.',
                    enum: ['variables', 'http_authentication', 'api_key', 'oauth2'],
                },
                name: {
                    type: 'string',
                    description:
                        'The name of the credential, this field is provided by the plugin of cloud service provider. The value of this field must be unique between credentials with the same csp and type.',
                },
                description: {
                    type: 'string',
                    description:
                        'The description of the credential,this field is provided by the plugin of cloud service provider.',
                },
                userId: {
                    type: 'string',
                    description: 'The id of user who created the credential.',
                },
            },
        },
    ],
} as const;

export const $CredentialVariables = {
    required: ['csp', 'description', 'name', 'type', 'variables'],
    type: 'object',
    properties: {
        csp: {
            type: 'string',
            description: 'The cloud service provider of the credential.',
            enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
        },
        type: {
            type: 'string',
            description: 'The type of the credential, this field is provided by the plugin of cloud service provider.',
            enum: ['variables', 'http_authentication', 'api_key', 'oauth2'],
        },
        name: {
            type: 'string',
            description:
                'The name of the credential, this field is provided by the plugin of cloud service provider. The value of this field must be unique between credentials with the same csp and type.',
        },
        description: {
            type: 'string',
            description:
                'The description of the credential,this field is provided by the plugin of cloud service provider.',
        },
        userId: {
            type: 'string',
            description: 'The id of user who created the credential.',
        },
        variables: {
            maxItems: 2147483647,
            minItems: 1,
            type: 'array',
            description: 'The variables list of the credential.',
            items: {
                $ref: '#/components/schemas/CredentialVariable',
            },
        },
    },
} as const;

export const $DeployResource = {
    required: ['kind', 'name', 'properties', 'resourceId'],
    type: 'object',
    properties: {
        resourceId: {
            type: 'string',
            description: 'The id of the deployed resource.',
        },
        name: {
            type: 'string',
            description: 'The name of the deployed resource.',
        },
        kind: {
            type: 'string',
            description: 'The kind of the deployed resource.',
            enum: [
                'vm',
                'container',
                'publicIP',
                'vpc',
                'volume',
                'unknown',
                'security_group',
                'security_group_rule',
                'keypair',
                'subnet',
            ],
        },
        properties: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                description: 'The properties of the deployed resource.',
            },
            description: 'The properties of the deployed resource.',
        },
    },
    description: 'The deployed resource list of the service before this modification.',
} as const;

export const $DeployedService = {
    required: [
        'category',
        'createTime',
        'csp',
        'lastModifiedTime',
        'name',
        'serviceDeploymentState',
        'serviceHostingType',
        'serviceId',
        'serviceState',
        'version',
    ],
    type: 'object',
    properties: {
        serviceId: {
            type: 'string',
            description: 'The ID of the service',
            format: 'uuid',
        },
        category: {
            type: 'string',
            description: 'The catalog of the service',
            enum: [
                'ai',
                'compute',
                'container',
                'storage',
                'network',
                'database',
                'mediaService',
                'security',
                'middleware',
                'others',
            ],
        },
        name: {
            type: 'string',
            description: 'The name of the service',
        },
        customerServiceName: {
            type: 'string',
            description:
                "Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated",
        },
        version: {
            type: 'string',
            description: 'The version of the service',
        },
        csp: {
            type: 'string',
            description: 'The provider of the service',
            enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
        },
        flavor: {
            type: 'string',
            description: 'The flavor of the service',
        },
        serviceTemplateId: {
            type: 'string',
            description: 'The id of the Service Template',
            format: 'uuid',
        },
        userId: {
            type: 'string',
            description: 'The id of the user who deployed the service.',
        },
        serviceDeploymentState: {
            type: 'string',
            description: 'The deployment state of the service',
            enum: [
                'deploying',
                'deployment successful',
                'deployment failed',
                'destroying',
                'destroy successful',
                'destroy failed',
                'manual cleanup required',
                'rollback failed',
                'modifying',
                'modification failed',
                'modification successful',
            ],
        },
        serviceState: {
            type: 'string',
            description: 'The run state of the service',
            enum: ['not running', 'running', 'starting', 'stopping', 'stopped', 'restarting'],
        },
        serviceHostingType: {
            type: 'string',
            description: 'Defines which cloud service account is used for deploying cloud resources.',
            enum: ['self', 'service-vendor'],
        },
        createTime: {
            type: 'string',
            description: 'Time of register service.',
            format: 'date-time',
        },
        lastModifiedTime: {
            type: 'string',
            description: 'Time of update service.',
            format: 'date-time',
        },
        lastStartedAt: {
            type: 'string',
            description: 'Time of start service.',
            format: 'date-time',
        },
        lastStoppedAt: {
            type: 'string',
            description: 'Time of stop service.',
            format: 'date-time',
        },
        lockConfig: {
            $ref: '#/components/schemas/ServiceLockConfig',
        },
        latestRunningManagementTask: {
            $ref: '#/components/schemas/ServiceStateManagementTaskDetails',
        },
        latestModificationAudit: {
            $ref: '#/components/schemas/ServiceModificationAuditDetails',
        },
    },
} as const;

export const $ServiceModificationAuditDetails = {
    required: ['newDeployRequest', 'previousDeployRequest', 'serviceId', 'serviceModificationRequestId', 'taskStatus'],
    type: 'object',
    properties: {
        serviceModificationRequestId: {
            type: 'string',
            description: 'The id of the service modification request.',
            format: 'uuid',
        },
        serviceId: {
            type: 'string',
            description: 'The id of the deployed service.',
            format: 'uuid',
        },
        taskStatus: {
            type: 'string',
            description: 'The status of the service state management task.',
            enum: ['created', 'in progress', 'successful', 'failed'],
        },
        errorMsg: {
            type: 'string',
            description: 'The error message of the failed management task.',
        },
        startedTime: {
            type: 'string',
            description: 'The started time of the task.',
            format: 'date-time',
        },
        completedTime: {
            type: 'string',
            description: 'The completed time of the task.',
            format: 'date-time',
        },
        previousDeployRequest: {
            $ref: '#/components/schemas/DeployRequest',
        },
        newDeployRequest: {
            $ref: '#/components/schemas/DeployRequest',
        },
        previousDeployedResources: {
            type: 'array',
            description: 'The deployed resource list of the service before this modification.',
            items: {
                $ref: '#/components/schemas/DeployResource',
            },
        },
        previousDeployedServiceProperties: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                description: 'The properties of the deployed service before this modification.',
            },
            description: 'The properties of the deployed service before this modification.',
        },
        previousDeployedResultProperties: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                description: 'The properties of the deployed result before this modification.',
            },
            description: 'The properties of the deployed result before this modification.',
        },
    },
    description: 'The latest service management audit details.',
} as const;

export const $ServiceStateManagementTaskDetails = {
    required: ['serviceId', 'taskId', 'taskStatus', 'taskType'],
    type: 'object',
    properties: {
        taskId: {
            type: 'string',
            description: 'The id of the service state management task.',
            format: 'uuid',
        },
        serviceId: {
            type: 'string',
            description: 'The id of the deployed service.',
            format: 'uuid',
        },
        taskType: {
            type: 'string',
            description: 'The type of the service state management task.',
            enum: ['start', 'stop', 'restart'],
        },
        taskStatus: {
            type: 'string',
            description: 'The status of the service state management task.',
            enum: ['created', 'in progress', 'successful', 'failed'],
        },
        errorMsg: {
            type: 'string',
            description: 'The error message of the failed management task.',
        },
        startedTime: {
            type: 'string',
            description: 'The started time of the task.',
            format: 'date-time',
        },
        completedTime: {
            type: 'string',
            description: 'The completed time of the task.',
            format: 'date-time',
        },
    },
    description: 'The latest running service management task details.',
} as const;

export const $ServiceMigrationDetails = {
    required: ['createTime', 'lastModifiedTime', 'migrationId', 'migrationStatus', 'newServiceId', 'oldServiceId'],
    type: 'object',
    properties: {
        migrationId: {
            type: 'string',
            description: 'The ID of the service migration',
            format: 'uuid',
        },
        oldServiceId: {
            type: 'string',
            description: 'The ID of the old service',
            format: 'uuid',
        },
        newServiceId: {
            type: 'string',
            description: 'The ID of the new service',
            format: 'uuid',
        },
        migrationStatus: {
            type: 'string',
            description: 'The status of the service migration',
            enum: [
                'MigrationStarted',
                'MigrationCompleted',
                'MigrationFailed',
                'DataExportStarted',
                'DataExportFailed',
                'DataExportCompleted',
                'DeployStarted',
                'DeployFailed',
                'DeployCompleted',
                'DataImportStarted',
                'DataImportFailed',
                'DataImportCompleted',
                'DestroyStarted',
                'DestroyFailed',
                'DestroyCompleted',
            ],
        },
        createTime: {
            type: 'string',
            description: 'Time of service migration.',
            format: 'date-time',
        },
        lastModifiedTime: {
            type: 'string',
            description: 'Time of update service migration.',
            format: 'date-time',
        },
    },
} as const;

export const $DeployedServiceDetails = {
    required: [
        'category',
        'createTime',
        'csp',
        'deployRequest',
        'lastModifiedTime',
        'name',
        'serviceDeploymentState',
        'serviceHostingType',
        'serviceId',
        'serviceState',
        'version',
    ],
    type: 'object',
    properties: {
        serviceId: {
            type: 'string',
            description: 'The ID of the service',
            format: 'uuid',
        },
        category: {
            type: 'string',
            description: 'The catalog of the service',
            enum: [
                'ai',
                'compute',
                'container',
                'storage',
                'network',
                'database',
                'mediaService',
                'security',
                'middleware',
                'others',
            ],
        },
        name: {
            type: 'string',
            description: 'The name of the service',
        },
        customerServiceName: {
            type: 'string',
            description:
                "Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated",
        },
        version: {
            type: 'string',
            description: 'The version of the service',
        },
        csp: {
            type: 'string',
            description: 'The provider of the service',
            enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
        },
        flavor: {
            type: 'string',
            description: 'The flavor of the service',
        },
        serviceTemplateId: {
            type: 'string',
            description: 'The id of the Service Template',
            format: 'uuid',
        },
        userId: {
            type: 'string',
            description: 'The id of the user who deployed the service.',
        },
        serviceDeploymentState: {
            type: 'string',
            description: 'The deployment state of the service',
            enum: [
                'deploying',
                'deployment successful',
                'deployment failed',
                'destroying',
                'destroy successful',
                'destroy failed',
                'manual cleanup required',
                'rollback failed',
                'modifying',
                'modification failed',
                'modification successful',
            ],
        },
        serviceState: {
            type: 'string',
            description: 'The run state of the service',
            enum: ['not running', 'running', 'starting', 'stopping', 'stopped', 'restarting'],
        },
        serviceHostingType: {
            type: 'string',
            description: 'Defines which cloud service account is used for deploying cloud resources.',
            enum: ['self', 'service-vendor'],
        },
        createTime: {
            type: 'string',
            description: 'Time of register service.',
            format: 'date-time',
        },
        lastModifiedTime: {
            type: 'string',
            description: 'Time of update service.',
            format: 'date-time',
        },
        lastStartedAt: {
            type: 'string',
            description: 'Time of start service.',
            format: 'date-time',
        },
        lastStoppedAt: {
            type: 'string',
            description: 'Time of stop service.',
            format: 'date-time',
        },
        lockConfig: {
            $ref: '#/components/schemas/ServiceLockConfig',
        },
        latestRunningManagementTask: {
            $ref: '#/components/schemas/ServiceStateManagementTaskDetails',
        },
        latestModificationAudit: {
            $ref: '#/components/schemas/ServiceModificationAuditDetails',
        },
        deployRequest: {
            $ref: '#/components/schemas/DeployRequest',
        },
        deployResources: {
            type: 'array',
            description: 'The resource list of the deployed service.',
            items: {
                $ref: '#/components/schemas/DeployResource',
            },
        },
        deployedServiceProperties: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                description: 'The properties of the deployed service.',
            },
            description: 'The properties of the deployed service.',
        },
        resultMessage: {
            type: 'string',
            description: 'The result message of the deployed service.',
        },
    },
} as const;

export const $VendorHostedDeployedServiceDetails = {
    required: [
        'category',
        'createTime',
        'csp',
        'deployRequest',
        'lastModifiedTime',
        'name',
        'serviceDeploymentState',
        'serviceHostingType',
        'serviceId',
        'serviceState',
        'version',
    ],
    type: 'object',
    properties: {
        serviceId: {
            type: 'string',
            description: 'The ID of the service',
            format: 'uuid',
        },
        category: {
            type: 'string',
            description: 'The catalog of the service',
            enum: [
                'ai',
                'compute',
                'container',
                'storage',
                'network',
                'database',
                'mediaService',
                'security',
                'middleware',
                'others',
            ],
        },
        name: {
            type: 'string',
            description: 'The name of the service',
        },
        customerServiceName: {
            type: 'string',
            description:
                "Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated",
        },
        version: {
            type: 'string',
            description: 'The version of the service',
        },
        csp: {
            type: 'string',
            description: 'The provider of the service',
            enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
        },
        flavor: {
            type: 'string',
            description: 'The flavor of the service',
        },
        serviceTemplateId: {
            type: 'string',
            description: 'The id of the Service Template',
            format: 'uuid',
        },
        userId: {
            type: 'string',
            description: 'The id of the user who deployed the service.',
        },
        serviceDeploymentState: {
            type: 'string',
            description: 'The deployment state of the service',
            enum: [
                'deploying',
                'deployment successful',
                'deployment failed',
                'destroying',
                'destroy successful',
                'destroy failed',
                'manual cleanup required',
                'rollback failed',
                'modifying',
                'modification failed',
                'modification successful',
            ],
        },
        serviceState: {
            type: 'string',
            description: 'The run state of the service',
            enum: ['not running', 'running', 'starting', 'stopping', 'stopped', 'restarting'],
        },
        serviceHostingType: {
            type: 'string',
            description: 'Defines which cloud service account is used for deploying cloud resources.',
            enum: ['self', 'service-vendor'],
        },
        createTime: {
            type: 'string',
            description: 'Time of register service.',
            format: 'date-time',
        },
        lastModifiedTime: {
            type: 'string',
            description: 'Time of update service.',
            format: 'date-time',
        },
        lastStartedAt: {
            type: 'string',
            description: 'Time of start service.',
            format: 'date-time',
        },
        lastStoppedAt: {
            type: 'string',
            description: 'Time of stop service.',
            format: 'date-time',
        },
        lockConfig: {
            $ref: '#/components/schemas/ServiceLockConfig',
        },
        latestRunningManagementTask: {
            $ref: '#/components/schemas/ServiceStateManagementTaskDetails',
        },
        latestModificationAudit: {
            $ref: '#/components/schemas/ServiceModificationAuditDetails',
        },
        deployRequest: {
            $ref: '#/components/schemas/DeployRequest',
        },
        deployedServiceProperties: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                description: 'The properties of the deployed service.',
            },
            description: 'The properties of the deployed service.',
        },
    },
} as const;

export const $FlavorPriceResult = {
    required: ['billingMode', 'flavorName'],
    type: 'object',
    properties: {
        flavorName: {
            type: 'string',
            description: 'The name of the flavor.',
        },
        billingMode: {
            type: 'string',
            description: 'The billing mode of the price.',
            enum: ['Fixed', 'Pay per Use'],
        },
        recurringPrice: {
            $ref: '#/components/schemas/Price',
        },
        oneTimePaymentPrice: {
            $ref: '#/components/schemas/Price',
        },
        errorMessage: {
            type: 'string',
            description: 'Error reason when price calculation fails.',
        },
        successful: {
            type: 'boolean',
        },
    },
} as const;

export const $Metric = {
    required: ['monitorResourceType', 'name', 'type', 'unit'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'The name of the metric.',
        },
        description: {
            type: 'string',
            description: 'The description of the metric.',
        },
        type: {
            type: 'string',
            description: 'The type of the metric.',
            enum: ['counter', 'gauge', 'histogram', 'summary'],
        },
        monitorResourceType: {
            type: 'string',
            description: 'The resource type of the metric.',
            enum: ['cpu', 'mem', 'vm_network_incoming', 'vm_network_outgoing'],
        },
        unit: {
            type: 'string',
            description: 'The unit of the metric.',
            enum: ['mb', 'kb', 'percentage', 'bit/s', 'Byte/s'],
        },
        labels: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                description: 'The labels of the metric.',
            },
            description: 'The labels of the metric.',
        },
        metrics: {
            type: 'array',
            description: 'The list of the metric items.',
            items: {
                $ref: '#/components/schemas/MetricItem',
            },
        },
    },
} as const;

export const $MetricItem = {
    required: ['timeStamp', 'type', 'value'],
    type: 'object',
    properties: {
        labels: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                description: 'The labels for the MetricItem.',
            },
            description: 'The labels for the MetricItem.',
        },
        type: {
            type: 'string',
            description: 'Type of the MetricItem.',
            enum: ['value', 'count', 'sum'],
        },
        timeStamp: {
            type: 'integer',
            description: 'Timestamp of the recorded metric.',
            format: 'int64',
        },
        value: {
            type: 'number',
            description: 'value of the MetricItem.',
        },
    },
    description: 'The list of the metric items.',
} as const;

export const $BackendSystemStatus = {
    required: ['backendSystemType', 'healthStatus', 'name'],
    type: 'object',
    properties: {
        backendSystemType: {
            type: 'string',
            description: 'The type of backend system.',
            enum: [
                'Identity Provider',
                'Database',
                'Terraform Boot',
                'Tofu Maker',
                'Policy Man',
                'OpenTelemetry Collector',
            ],
        },
        name: {
            type: 'string',
            description: 'The name of backend system.',
        },
        healthStatus: {
            type: 'string',
            description: 'The health status of backend system.',
            enum: ['OK', 'NOK'],
        },
        endpoint: {
            type: 'string',
            description:
                "The endpoint of backend system. This filed is shown when the user have role 'admin' otherwise it is null.",
        },
        details: {
            type: 'string',
            description:
                "The details why health is not ok.This filed is shown when the user have role 'admin' otherwise it is null.",
        },
    },
    description:
        'The health status of backend systems. This list contains status of identity provider and status of database.The status of identity provider will return when authorization is enabled.',
} as const;

export const $SystemStatus = {
    required: ['backendSystemStatuses', 'healthStatus'],
    type: 'object',
    properties: {
        healthStatus: {
            type: 'string',
            description: 'The health status of Xpanse api service.',
            enum: ['OK', 'NOK'],
        },
        backendSystemStatuses: {
            type: 'array',
            description:
                'The health status of backend systems. This list contains status of identity provider and status of database.The status of identity provider will return when authorization is enabled.',
            items: {
                $ref: '#/components/schemas/BackendSystemStatus',
            },
        },
    },
} as const;

export const $ServiceFlavor = {
    required: ['name', 'priority', 'properties'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'The flavor name',
        },
        properties: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                description: 'The properties of the flavor',
            },
            description: 'The properties of the flavor',
        },
        priority: {
            minimum: 1,
            type: 'integer',
            description: 'The priority of the flavor. The larger value means lower priority.',
            format: 'int32',
        },
        features: {
            type: 'array',
            description: 'Important features and differentiators of the flavor.',
            items: {
                type: 'string',
                description: 'Important features and differentiators of the flavor.',
            },
        },
    },
    description: 'The flavors of the orderable service.',
} as const;

export const $UserOrderableServiceVo = {
    required: [
        'billing',
        'category',
        'csp',
        'description',
        'flavors',
        'icon',
        'name',
        'regions',
        'serviceHostingType',
        'serviceProviderContactDetails',
        'serviceTemplateId',
        'variables',
        'version',
    ],
    type: 'object',
    properties: {
        serviceTemplateId: {
            type: 'string',
            description: 'The id of the orderable service.',
            format: 'uuid',
        },
        category: {
            type: 'string',
            description: 'The category of the orderable service.',
            enum: [
                'ai',
                'compute',
                'container',
                'storage',
                'network',
                'database',
                'mediaService',
                'security',
                'middleware',
                'others',
            ],
        },
        name: {
            type: 'string',
            description: 'The name of the orderable service.',
        },
        version: {
            type: 'string',
            description: 'The version of the orderable service.',
        },
        csp: {
            type: 'string',
            description: 'The Cloud Service Provider of the orderable service.',
            enum: ['huawei', 'flexibleEngine', 'openstack', 'scs', 'alicloud', 'aws', 'azure', 'google'],
        },
        regions: {
            type: 'array',
            description: 'The regions of the Cloud Service Provider.',
            items: {
                $ref: '#/components/schemas/Region',
            },
        },
        description: {
            type: 'string',
            description: 'The description of the orderable service.',
        },
        icon: {
            type: 'string',
            description: 'The icon of the orderable service.',
        },
        variables: {
            type: 'array',
            description: 'The variables for the deployment, which will be passed to the deployer.',
            items: {
                $ref: '#/components/schemas/DeployVariable',
            },
        },
        flavors: {
            type: 'array',
            description: 'The flavors of the orderable service.',
            items: {
                $ref: '#/components/schemas/ServiceFlavor',
            },
        },
        billing: {
            $ref: '#/components/schemas/Billing',
        },
        serviceHostingType: {
            type: 'string',
            description: 'Defines which cloud service account is used for deploying cloud resources.',
            enum: ['self', 'service-vendor'],
        },
        serviceProviderContactDetails: {
            $ref: '#/components/schemas/ServiceProviderContactDetails',
        },
        serviceAvailabilityConfigs: {
            type: 'array',
            description: 'The list of availability zone configuration of the service.',
            items: {
                $ref: '#/components/schemas/AvailabilityZoneConfig',
            },
        },
        eula: {
            type: 'string',
            description: 'End user license agreement content of the service.',
        },
        links: {
            type: 'array',
            items: {
                $ref: '#/components/schemas/Link',
            },
        },
    },
} as const;

export const $TokenResponse = {
    required: ['access_token', 'expires_in', 'id_token', 'token_type'],
    type: 'object',
    properties: {
        access_token: {
            type: 'string',
            description: 'An access_token as a JWT or opaque token.',
        },
        token_type: {
            type: 'string',
            description: 'Type of the access_token.',
        },
        expires_in: {
            type: 'string',
            description: 'Number of second until the expiration of the access_token',
        },
        id_token: {
            type: 'string',
            description: 'An id_token of the authorized service user',
        },
        scopes: {
            type: 'string',
            description: 'Scopes of the access_token.',
        },
    },
} as const;
